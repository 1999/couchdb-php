This is simple PHP package to work with CouchDB. It uses curl library to communicate with CouchDB web server, json_decode/encode functions to work with data and memcached to store ETags and cache data.
This package works here: http://allcafe.ru, package author: Dmitry Sorin

The package consists of 2 files:
1. couchdb.php - CouchDB communication class;
2. couchdb2.php - CouchDB communication class (another implementation for faster work);
2. memcache.php - extended Memcache class.

You'll need:
1. php5.3 or higher;
2. working memcached server with php-memcache module
3. php-curl module, json_* functions enabled

Attention:
Both classed must use the same namespace. CouchDb class can generate unique 40-character-length ids for new documents. Constants can be changed in both couchdb.php and memcache.php classes.

Difference between couchdb.php and couchdb2.php
Both files implement CouchDb class which talks to CouchDB server. Couchdb2.php file takes into consideration the fact that documents' ETags do not change when other document in the same database is changed, only views' ETags do. Couchdb.php "flushes" all documents' and views' ETags after updating any document in database.
The advantage of using couchdb2.php is: it may perform less queries to CouchDB server than couchdb.php, especially when you fetch documents. The disadvantage is: after updating the document from Futon (or else) you should manually drop the data with "couchdata:database_name:document_id" from Memcached server.

FAQ:
Q: Why should i use extended memcache class?
A: Couchdb-php caches response data in memcached with long-character cache keys, which consists of database name, URL part and ETags. Often its length is more than memcached can afford (250 characters) and extended memcache class solves this problem.

Q: How can i set user and password to connect with CouchDB server?
A: You can uncomment COUCHDB_USER and COUCHDB_PASS constants in couchdb.php class and specify them.

############################################################################
############################################################################

Available methods:

	Couchdb->get(databasename, url) to fetch views/document
		$docId = '.....';
		$couchdbObj->get( $dbName, $docId );

	Couchdb->insert(databasename, document) to insert data
		$doc = new \StdClass;
		$doc->_id = $couchdbObj->uniqid();
		$doc->sampledata = 'some data';
		$couchdbObj->insert( $dbName, $doc );

	Couchdb->update(databasename, id, document) to update data
		$doc->newdata = 'some data';
		$couchdbObj->update( $dbName, $doc->_id, $doc );

	Couchdb->delete(databasename, id, revision) to delete data
		$couchdbObj->delete( $dbName, $doc->_id, $doc->_rev );

	Couchdb->uniqid() to generate unique identifier
		$doc = new \StdClass;
		$doc->_id = $couchdbObj->uniqid();
		$doc->sampledata = 'great stuff';

	Couchdb->encode(data) to properly encode url parameters:
		$key = array( 'project', 2, $url );
		$designDocUrl = '_design/list/_view/sample?key=' . $couchdbObj->encode( $key );
		$result = $couchdbObj->get( $dbName, $designDocUrl );

Example:
Create database "testing" in Futon and run example.php

############################################################################
############################################################################

CouchDB is an open source document-oriented database written in the Erlang programming language. It borrows from NoSQL and is designed for local replication and to scale horizontally across a wide range of devices.

Memcached is a general-purpose distributed memory caching system, which is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read.

